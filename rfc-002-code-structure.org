#+TITLE: RFC-002: UTMS Code Structure and Design Patterns
#+RFC-ID: 002
#+STATUS: Draft
#+AUTHOR: Daniel Neagaru
#+CREATED: <2025-04-07>
#+LAST-MODIFIED: <2025-04-07>
#+VERSION: 0.1
#+DEPENDS-ON: RFC-001
#+SUPERSEDES:
#+ABSTRACT: Defines the core architectural patterns, their relationships, and implementation guidelines for UTMS, including Components, Managers, Loaders, Resolvers, Models, and Plugins.

* Introduction
:PROPERTIES:
:ID:       6afd28c6-3206-4d21-87a1-1c4b0480b200
:END:
The *Universal Time Measurement System (UTMS)* is built with a
modular, extensible architecture that emphasizes flexibility,
composability, and dynamic behavior. This RFC documents the major
*patterns* used in the UTMS codebase — including *Components*,
*Managers*, *Models*, *Resolvers*, *Loaders*, and *Plugins* — and how
they interact. Understanding these patterns is essential for
contributing to, extending, or debugging the UTMS system.

* Overview of UTMS Design Patterns
:PROPERTIES:
:ID:       9edb1c55-3189-4c95-be18-418e3e7b9398
:END:
UTMS follows six primary design patterns that work together in a layered architecture:


** Components
:PROPERTIES:
:ID:       64aba7e1-584c-41e4-b497-d8a77c3800ad
:END:
Base building blocks with lazy loading and dict-like access.

** Managers
:PROPERTIES:
:ID:       de3c5957-75e6-4888-8288-48a6e12b095b
:END:
Type-safe collection managers handling object lifecycle and persistence.

** Loaders
:PROPERTIES:
:ID:       c4c105ce-6c7e-431a-b209-9f751ce9d4a4
:END:
Transform external definitions into system components through context-aware loading.

** Resolvers
:PROPERTIES:
:ID:       49470632-6aca-4e94-9ce9-0e14c88b1d63
:END:
Handle expression evaluation and dynamic content resolution.

** Models
:PROPERTIES:
:ID:       47b3496e-9c1e-4f5f-85b7-56ada8ab7212
:END:
Define type-safe data structures and behaviors.

** Plugins
:PROPERTIES:
:ID:       46019a97-d202-4412-b964-52e00e31a3be
:END:
Provide extensible node handling and system customization.

* Pattern Relationships
:PROPERTIES:
:ID:       ccd44224-9519-4f26-938a-4f4dbbdb47f7
:END:

** Data Flow
:PROPERTIES:
:ID:       eec6b991-74e2-4934-a1f3-acb78186f877
:END:
1. Plugins process raw node definitions
2. Loaders use plugins to create components
3. Components are managed by managers
4. Resolvers handle dynamic evaluation
5. Models provide type-safe data structures

** Integration Points
:PROPERTIES:
:ID:       400b0916-c608-4f59-9072-40b0fc00969b
:END:
- Loader ↔ Plugin: Node processing
- Loader ↔ Manager: Component creation
- Component ↔ Manager: Lifecycle management
- Resolver ↔ Manager: Dynamic resolution
- Model ↔ Manager: Type safety

* Pattern Implementations
:PROPERTIES:
:ID:       3dd91d63-366d-4d47-955f-6b4b3cffc7cb
:END:

** Component Pattern
:PROPERTIES:
:ID:       d84d147a-19e0-4ea4-a46b-f7c066f08ae0
:END:

** Visual Overview
:PROPERTIES:
:ID:       e4ea1cc9-61fb-4ce7-bed9-d6bd127a1b1c
:END:
#+begin_src
                                    ┌─────────────┐
                                    │   Plugins   │
                                    └─────┬───────┘
                                          │
                                          ▼
┌──────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   File   │ => │    AST      │ => │   Loaders   │ => │  Components │
│  (*.hy)  │    │  (HyNodes)  │    │             │    │             │
└──────────┘    └─────────────┘    └──────┬──────┘    └───────┬─────┘
                                          │                   │
                                    ┌─────┴──────┐            │
                                    │ Resolvers  │            │
                                    └─────┬──────┘            │
                                          │                   │
                                    ┌─────┴──────┐    ┌───────▼──────┐
                                    │  Managers  │ <= │    Models    │
                                    └────────────┘    └──────────────┘
#+end_src

** Data Flow Stages
:PROPERTIES:
:ID:       257e5ec2-eff4-41ca-867e-e4e2d93929e7
:END:

1. Input Processing
   - *.hy files are read
   - AST nodes are generated
   - Plugins process specific node types

2. Loading Stage
   - Loaders use plugins to parse nodes
   - Components are created from parsed data
   - Initial state is established

3. Resolution Stage
   - Resolvers handle dynamic expressions
   - Context is applied
   - Values are evaluated

4. Management Stage
   - Managers maintain component lifecycle
   - Models provide type-safe structures
   - State is persisted

** Example Flow: Config Processing
:PROPERTIES:
:ID:       efb9f4bd-f294-42a5-bac5-32c0fabe30e3
:END:

#+begin_src
config.hy => ConfigNodePlugin => ConfigLoader => ConfigComponent
                                      ↓              ↓
                               ConfigResolver => ConfigManager <= Config
#+end_src

1. File Processing
   - config.hy contains configuration definitions
   - ConfigNodePlugin parses custom-set-config forms
   - AST nodes are generated with type information

2. Loading
   - ConfigLoader processes nodes
   - Creates Config models
   - Initializes ConfigComponent

3. Resolution
   - ConfigResolver handles dynamic values
   - Evaluates expressions
   - Applies context

4. Management
   - ConfigManager maintains configs
   - Handles lifecycle
   - Provides access API


*** Core Implementation
:PROPERTIES:
:ID:       f9fb7f53-5254-4fca-82cf-e1f4f9499d61
:END:
#+begin_src python
class SystemComponent(MutableMapping, ComponentMixin):
    def __init__(self, config_dir: str, component_manager=None):
        self._config_dir = config_dir
        self._component_manager = component_manager
        self._items = {}
        self._loaded = False
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       02f1363d-afb1-47e1-af6a-4ed8187dac0d
:END:
- Dict-like access to component data
- Lazy loading mechanism
- Component manager integration
- State management

*** Example: ConfigComponent
:PROPERTIES:
:ID:       f3956dbe-c0ab-4734-b2a6-9f6ca50fd5fe
:END:
#+begin_src python
class ConfigComponent(SystemComponent):
    def load(self) -> None:
        config_file = os.path.join(self._config_dir, "config.hy")
        nodes = self._ast_manager.parse_file(config_file)
        self._items = self._loader.process(nodes, context)
#+end_src

** Manager Pattern
:PROPERTIES:
:ID:       2c8417d4-1c96-4e8b-ba94-883badd26f00
:END:

*** Core Implementation
:PROPERTIES:
:ID:       1e303935-e82b-4ad1-bbbc-c7a8323da895
:END:
#+begin_src python
class BaseManager(Generic[T], ManagerMixin):
    def __init__(self):
        self._items: Dict[str, T] = {}
        self._initialized: bool = False

    @abstractmethod
    def create(self, label: str, **kwargs) -> T: ...
    def get(self, label: str) -> Optional[T]: ...
    def add(self, label: str, item: T) -> None: ...
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       1f45e3e8-6970-4289-be66-f2881dcc0d58
:END:
- Type-safe collection management
- Object lifecycle handling
- Serialization support
- State tracking

*** Example: ConfigManager
:PROPERTIES:
:ID:       c469d3b7-7155-42f5-8b72-40b5e1de9905
:END:
#+begin_src python
class ConfigManager(BaseManager[Config]):
    def create(
        self,
        key: str,
        value: Any,
        is_dynamic: bool = False,
        original: Optional[str] = None,
    ) -> Config:
        config = Config(
            key=key,
            value=value,
            is_dynamic=is_dynamic,
            original=original,
        )
        self.add(key, config)
        return config
#+end_src

** Resolver Pattern
:PROPERTIES:
:ID:       148bf7cf-7e3a-4070-a1ab-3c8c1f3c2d43
:END:

*** Core Implementation
:PROPERTIES:
:ID:       35adaceb-11b0-4433-8a45-456dc23e19ac
:END:
#+begin_src python
class HyResolver(ExpressionResolver, LocalsProvider, ResolverMixin):
    def resolve(
        self, 
        expr: HyValue,
        context: Context = None,
        local_names: LocalsDict = None
    ) -> Tuple[Any, DynamicExpressionInfo]: ...
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       d3bb5036-0235-4482-b229-0c91ba0811c4
:END:
- Expression evaluation
- Dynamic content handling
- Context management
- Dot operator resolution

*** Example: ConfigResolver
:PROPERTIES:
:ID:       c51763ea-7b64-4ffa-9a09-7aee2509690c
:END:
#+begin_src python
class ConfigResolver(HyResolver):
    def _resolve_expression(
        self,
        expr: HyExpression,
        context: Context,
        local_names: LocalsDict = None
    ) -> ResolvedValue:
        if str(expr[0]) == "custom-set-config":
            result = {}
            for setting in expr[1:]:
                key = str(setting[0])
                value = setting[1]
                resolved_value, _ = self.resolve(value, context, local_names)
                result[key] = resolved_value
            return result
#+end_src

** Loader Pattern
:PROPERTIES:
:ID:       db108a1a-b70d-426a-9bf0-6f4754e88e01
:END:

*** Core Implementation
:PROPERTIES:
:ID:       0915ce3a-88dc-4819-965e-ebeebc0b9092
:END:
#+begin_src python
class ComponentLoader(ABC, Generic[T, M], LoaderMixin):
    def process(
        self,
        nodes: List[HyNode],
        context: LoaderContext
    ) -> Dict[str, T]: ...
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       365aa3c0-f67c-4675-8e18-c86f2c070d18
:END:
- Node parsing
- Object creation
- Context handling
- Manager integration

*** Example: ConfigLoader
:PROPERTIES:
:ID:       ae2f5751-0189-4e74-984b-7535d6df1ab1
:END:
#+begin_src python
class ConfigLoader(ComponentLoader[Config, ConfigManager]):
    def parse_definitions(self, nodes: List[HyNode]) -> Dict[str, dict]:
        configs = {}
        for node in nodes:
            if self.validate_node(node, "custom-set-config"):
                for setting in node.children[1:]:
                    key = str(setting.value)
                    value_node = setting.children[0]
                    configs[key] = {
                        "key": key,
                        "value": value_node.value,
                        "is_dynamic": value_node.is_dynamic,
                        "original": value_node.original
                    }
        return configs
#+end_src

** Model Pattern
:PROPERTIES:
:ID:       52c6cbd1-b1ff-4e5d-b991-a29f1301d82d
:END:

*** Core Implementation
:PROPERTIES:
:ID:       e2d87ad3-30ba-4168-9d3a-5dc10cce0846
:END:
#+begin_src python
@dataclass
class Config(ModelMixin):
    key: str
    value: Any
    is_dynamic: bool = False
    original: Optional[str] = None
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       05b80dbb-0db7-4202-825f-d06ff49e339d
:END:
- Data structure definition
- Type safety
- Value formatting
- Identity management

** Plugin Pattern
:PROPERTIES:
:ID:       cc2ef330-caaa-4748-b8df-59a553877566
:END:

*** Core Implementation
:PROPERTIES:
:ID:       401b64d9-4c52-47c4-929e-739c73b7c911
:END:
#+begin_src python
class NodePlugin(UTMSPlugin):
    @property
    @abstractmethod
    def node_type(self) -> str: ...
    
    @abstractmethod
    def parse(self, expression: Any) -> "HyNode": ...
    
    @abstractmethod
    def format(self, node: "HyNode") -> list[str]: ...
#+end_src

*** Key Responsibilities
:PROPERTIES:
:ID:       77c60ee0-122c-4df2-b346-43b7a142ccd2
:END:
- Node type handling
- Expression parsing
- Node formatting
- Plugin lifecycle

*** Example: ConfigNodePlugin
:PROPERTIES:
:ID:       07713402-3d53-4891-8724-8d4c3a89e621
:END:
#+begin_src python
class ConfigNodePlugin(NodePlugin):
    @property
    def node_type(self) -> str:
        return "custom-set-config"

    def parse(self, expr) -> HyNode:
        node = HyNode(
            type=self.node_type,
            value=None,
            original=hy.repr(expr).strip("'"),
            children=[]
        )
        # Node parsing implementation
        return node
#+end_src


* Best Practices and Guidelines
:PROPERTIES:
:ID:       ec77bd26-3116-4532-a571-ee153e423370
:END:

1. *Loose Coupling*: Use managers or resolvers as bridges; avoid
   direct hard dependencies.
2. *Modularity*: Each element should focus on a single concern —
   component logic, resolution, modeling, etc.
3. *Extensibility*: Favor interfaces, registries, and plugins over
   hardcoded logic.
4. *Introspection*: Every part should self-describe (e.g. name, type,
   properties).
5. *Separation of Concerns*: Never mix component logic with resolution
   or loading responsibilities.
6. *Documentation*: Keep docstrings, inline hints, and examples
   minimal but accurate — all modules should be browsable without
   guesswork.

* Conclusion
:PROPERTIES:
:ID:       eba6c29c-22a1-4420-a338-3094391925e7
:END:
This RFC formalizes the internal architecture and development patterns
of UTMS. Every core subsystem — Components, Managers, Models,
Resolvers, Loaders, Plugins — plays a unique and well-scoped role.

This document serves as the entry point for navigating the codebase
and should be updated as the system evolves.

* Change Log
:PROPERTIES:
:ID:       97f49a91-3d52-4c3e-baa4-727f90727ae1
:END:
- 0.1 :: Initial draft
